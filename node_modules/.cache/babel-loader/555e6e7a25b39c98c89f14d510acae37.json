{"ast":null,"code":"import React, { Children } from 'react';\nimport { useMantineDefaultProps } from '@mantine/styles';\nimport useStyles from './MediaQuery.styles.js';\n\nfunction MediaQuery(props) {\n  var _a;\n\n  const {\n    children,\n    smallerThan,\n    largerThan,\n    query,\n    styles,\n    className\n  } = useMantineDefaultProps(\"MediaQuery\", {}, props);\n  const {\n    classes,\n    cx\n  } = useStyles({\n    smallerThan,\n    largerThan,\n    query,\n    styles\n  }, {\n    name: \"MediaQuery\"\n  });\n  const child = Children.only(children);\n\n  if (typeof child === \"object\" && child !== null && \"props\" in child) {\n    return React.cloneElement(child, {\n      className: cx(classes.media, (_a = child.props) == null ? void 0 : _a.className, className)\n    });\n  }\n\n  return child;\n}\n\nMediaQuery.displayName = \"@mantine/core/MediaQuery\";\nexport { MediaQuery };","map":{"version":3,"sources":["../../../src/components/MediaQuery/MediaQuery.tsx"],"names":[],"mappings":";;;;AAGO,SAAS,UAAT,CAAoB,KAApB,EAA2B;AAChC,MAAI,EAAJ;;AACA,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,WAAZ;AAAyB,IAAA,UAAzB;AAAqC,IAAA,KAArC;AAA4C,IAAA,MAA5C;AAAoD,IAAA;AAApD,MAAkE,sBAAsB,CAAC,YAAD,EAAe,EAAf,EAAmB,KAAnB,CAA9F;AACA,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAkB,SAAS,CAAC;AAAE,IAAA,WAAF;AAAe,IAAA,UAAf;AAA2B,IAAA,KAA3B;AAAkC,IAAA;AAAlC,GAAD,EAA6C;AAAE,IAAA,IAAI,EAAE;AAAR,GAA7C,CAAjC;AACA,QAAM,KAAK,GAAG,QAAQ,CAAC,IAAT,CAAc,QAAd,CAAd;;AACA,MAAI,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,KAAK,IAAvC,IAA+C,WAAW,KAA9D,EAAqE;AACnE,WAAO,KAAK,CAAC,YAAN,CAAmB,KAAnB,EAA0B;AAC/B,MAAA,SAAS,EAAE,EAAE,CAAC,OAAO,CAAC,KAAT,EAAgB,CAAC,EAAE,GAAG,KAAK,CAAC,KAAZ,KAAsB,IAAtB,GAA6B,KAAK,CAAlC,GAAsC,EAAE,CAAC,SAAzD,EAAoE,SAApE;AADkB,KAA1B,CAAP;AAGD;;AACD,SAAO,KAAP;AACD;;AACD,UAAU,CAAC,WAAX,GAAyB,0BAAzB","sourcesContent":["import React, { Children } from 'react';\nimport { MantineNumberSize, CSSObject, useMantineDefaultProps } from '@mantine/styles';\nimport useStyles from './MediaQuery.styles';\n\nexport interface MediaQueryProps {\n  className?: string;\n\n  /** Child that should be shown at given breakpoint, it must accept className prop */\n  children: React.ReactNode;\n\n  /** Styles applied to child when viewport is smaller than given breakpoint */\n  smallerThan?: MantineNumberSize;\n\n  /** Styles applied to child when viewport is larger than given breakpoint */\n  largerThan?: MantineNumberSize;\n\n  /** Any other media query */\n  query?: string;\n\n  /** Styles applied to child when breakpoint matches */\n  styles: CSSObject;\n}\n\nexport function MediaQuery(props: MediaQueryProps) {\n  const { children, smallerThan, largerThan, query, styles, className } = useMantineDefaultProps(\n    'MediaQuery',\n    {},\n    props\n  );\n\n  const { classes, cx } = useStyles(\n    { smallerThan, largerThan, query, styles },\n    { name: 'MediaQuery' }\n  );\n\n  const child = Children.only(children) as React.ReactElement;\n\n  if (typeof child === 'object' && child !== null && 'props' in child) {\n    return React.cloneElement(child, {\n      className: cx(classes.media, child.props?.className, className),\n    });\n  }\n\n  return child;\n}\n\nMediaQuery.displayName = '@mantine/core/MediaQuery';\n"]},"metadata":{},"sourceType":"module"}