{"ast":null,"code":"import React from 'react';\nimport { Global } from '@emotion/react';\n\nfunction assignSizeVariables(variables, sizes, name) {\n  Object.keys(sizes).forEach(size => {\n    variables[`--mantine-${name}-${size}`] = typeof sizes[size] === \"number\" ? `${sizes[size]}px` : sizes[size];\n  });\n}\n\nfunction MantineCssVariables(_ref) {\n  let {\n    theme\n  } = _ref;\n  const variables = {\n    \"--mantine-color-white\": theme.white,\n    \"--mantine-color-black\": theme.black,\n    \"--mantine-transition-timing-function\": theme.transitionTimingFunction,\n    \"--mantine-line-height\": `${theme.lineHeight}`,\n    \"--mantine-font-family\": theme.fontFamily,\n    \"--mantine-font-family-monospace\": theme.fontFamilyMonospace,\n    \"--mantine-font-family-headings\": theme.headings.fontFamily,\n    \"--mantine-heading-font-weight\": `${theme.headings.fontWeight}`\n  };\n  assignSizeVariables(variables, theme.shadows, \"shadow\");\n  assignSizeVariables(variables, theme.fontSizes, \"font-size\");\n  assignSizeVariables(variables, theme.radius, \"radius\");\n  assignSizeVariables(variables, theme.spacing, \"spacing\");\n  Object.keys(theme.colors).forEach(color => {\n    theme.colors[color].forEach((shade, index) => {\n      variables[`--mantine-color-${color}-${index}`] = shade;\n    });\n  });\n  const headings = theme.headings.sizes;\n  Object.keys(headings).forEach(heading => {\n    variables[`--mantine-${heading}-font-size`] = `${headings[heading].fontSize}px`;\n    variables[`--mantine-${heading}-line-height`] = `${headings[heading].lineHeight}`;\n  });\n  return /* @__PURE__ */React.createElement(Global, {\n    styles: {\n      \":root\": variables\n    }\n  });\n}\n\nexport { MantineCssVariables };","map":{"version":3,"sources":["../../src/theme/MantineCssVariables.tsx"],"names":[],"mappings":";;;AAEA,SAAS,mBAAT,CAA6B,SAA7B,EAAwC,KAAxC,EAA+C,IAA/C,EAAqD;AACnD,EAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA4B,IAAD,IAAU;AACnC,IAAA,SAAS,CAAE,aAAY,IAAK,IAAG,IAAK,EAA3B,CAAT,GAAyC,OAAO,KAAK,CAAC,IAAD,CAAZ,KAAuB,QAAvB,GAAmC,GAAE,KAAK,CAAC,IAAD,CAAO,IAAjD,GAAuD,KAAK,CAAC,IAAD,CAArG;AACD,GAFD;AAGD;;AACM,SAAS,mBAAT,OAAwC;AAAA,MAAX;AAAE,IAAA;AAAF,GAAW;AAC7C,QAAM,SAAS,GAAG;AAChB,6BAAyB,KAAK,CAAC,KADf;AAEhB,6BAAyB,KAAK,CAAC,KAFf;AAGhB,4CAAwC,KAAK,CAAC,wBAH9B;AAIhB,6BAA0B,GAAE,KAAK,CAAC,UAAW,EAJ7B;AAKhB,6BAAyB,KAAK,CAAC,UALf;AAMhB,uCAAmC,KAAK,CAAC,mBANzB;AAOhB,sCAAkC,KAAK,CAAC,QAAN,CAAe,UAPjC;AAQhB,qCAAkC,GAAE,KAAK,CAAC,QAAN,CAAe,UAAW;AAR9C,GAAlB;AAUA,EAAA,mBAAmB,CAAC,SAAD,EAAY,KAAK,CAAC,OAAlB,EAA2B,QAA3B,CAAnB;AACA,EAAA,mBAAmB,CAAC,SAAD,EAAY,KAAK,CAAC,SAAlB,EAA6B,WAA7B,CAAnB;AACA,EAAA,mBAAmB,CAAC,SAAD,EAAY,KAAK,CAAC,MAAlB,EAA0B,QAA1B,CAAnB;AACA,EAAA,mBAAmB,CAAC,SAAD,EAAY,KAAK,CAAC,OAAlB,EAA2B,SAA3B,CAAnB;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,MAAlB,EAA0B,OAA1B,CAAmC,KAAD,IAAW;AAC3C,IAAA,KAAK,CAAC,MAAN,CAAa,KAAb,EAAoB,OAApB,CAA4B,CAAC,KAAD,EAAQ,KAAR,KAAkB;AAC5C,MAAA,SAAS,CAAE,mBAAkB,KAAM,IAAG,KAAM,EAAnC,CAAT,GAAiD,KAAjD;AACD,KAFD;AAGD,GAJD;AAKA,QAAM,QAAQ,GAAG,KAAK,CAAC,QAAN,CAAe,KAAhC;AACA,EAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,OAAtB,CAA+B,OAAD,IAAa;AACzC,IAAA,SAAS,CAAE,aAAY,OAAQ,YAAtB,CAAT,GAA+C,GAAE,QAAQ,CAAC,OAAD,CAAR,CAAkB,QAAS,IAA5E;AACA,IAAA,SAAS,CAAE,aAAY,OAAQ,cAAtB,CAAT,GAAiD,GAAE,QAAQ,CAAC,OAAD,CAAR,CAAkB,UAAW,EAAhF;AACD,GAHD;AAIA,SAAA,eAAuB,KAAK,CAAC,aAAN,CAAoB,MAApB,EAA4B;AACjD,IAAA,MAAM,EAAE;AACN,eAAS;AADH;AADyC,GAA5B,CAAvB;AAKF","sourcesContent":["import React from 'react';\nimport { Global } from '@emotion/react';\nimport type { MantineTheme, MantineSize } from './types';\n\nfunction assignSizeVariables(\n  variables: Record<string, string>,\n  sizes: Record<MantineSize, number | string>,\n  name: string\n) {\n  Object.keys(sizes).forEach((size) => {\n    // eslint-disable-next-line no-param-reassign\n    variables[`--mantine-${name}-${size}`] =\n      typeof sizes[size] === 'number' ? `${sizes[size]}px` : sizes[size];\n  });\n}\n\nexport function MantineCssVariables({ theme }: { theme: MantineTheme }) {\n  const variables: Record<string, string> = {\n    '--mantine-color-white': theme.white,\n    '--mantine-color-black': theme.black,\n    '--mantine-transition-timing-function': theme.transitionTimingFunction,\n    '--mantine-line-height': `${theme.lineHeight}`,\n    '--mantine-font-family': theme.fontFamily,\n    '--mantine-font-family-monospace': theme.fontFamilyMonospace,\n    '--mantine-font-family-headings': theme.headings.fontFamily,\n    '--mantine-heading-font-weight': `${theme.headings.fontWeight}`,\n  };\n\n  assignSizeVariables(variables, theme.shadows, 'shadow');\n  assignSizeVariables(variables, theme.fontSizes, 'font-size');\n  assignSizeVariables(variables, theme.radius, 'radius');\n  assignSizeVariables(variables, theme.spacing, 'spacing');\n\n  Object.keys(theme.colors).forEach((color) => {\n    theme.colors[color].forEach((shade, index) => {\n      variables[`--mantine-color-${color}-${index}`] = shade;\n    });\n  });\n\n  const headings = theme.headings.sizes;\n\n  Object.keys(headings).forEach((heading) => {\n    variables[`--mantine-${heading}-font-size`] = `${headings[heading].fontSize}px`;\n    variables[`--mantine-${heading}-line-height`] = `${headings[heading].lineHeight}`;\n  });\n\n  return (\n    <Global\n      styles={{\n        ':root': variables,\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}