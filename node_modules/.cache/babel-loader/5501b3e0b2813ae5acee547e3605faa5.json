{"ast":null,"code":"import { fromEntries } from './utils/from-entries/from-entries.js';\nimport { useCss } from './use-css.js';\nimport { useMantineTheme, useMantineThemeStyles } from '../theme/MantineProvider.js';\nimport { mergeClassNames } from './utils/merge-class-names/merge-class-names.js';\n\nfunction createStyles(getCssObjectOrCssObject) {\n  const getCssObject = typeof getCssObjectOrCssObject === \"function\" ? getCssObjectOrCssObject : () => getCssObjectOrCssObject;\n\n  function useStyles(params, options) {\n    const theme = useMantineTheme();\n    const {\n      styles: themeStyles,\n      classNames: themeClassNames\n    } = useMantineThemeStyles(options == null ? void 0 : options.name);\n    const {\n      css,\n      cx\n    } = useCss();\n\n    function createRef(refName) {\n      return `__mantine-ref-${refName || \"\"}`;\n    }\n\n    const cssObject = getCssObject(theme, params, createRef);\n\n    const _styles = typeof (options == null ? void 0 : options.styles) === \"function\" ? options == null ? void 0 : options.styles(theme) : (options == null ? void 0 : options.styles) || {};\n\n    const _themeStyles = typeof themeStyles === \"function\" ? themeStyles(theme, params || {}) : themeStyles || {};\n\n    const classes = fromEntries(Object.keys(cssObject).map(key => {\n      const mergedStyles = cx(css(cssObject[key]), css(_themeStyles[key]), css(_styles[key]));\n      return [key, mergedStyles];\n    }));\n    return {\n      classes: mergeClassNames(cx, classes, themeClassNames, options == null ? void 0 : options.classNames, options == null ? void 0 : options.name),\n      cx,\n      theme\n    };\n  }\n\n  return useStyles;\n}\n\nexport { createStyles };","map":{"version":3,"sources":["../../src/tss/create-styles.ts"],"names":[],"mappings":";;;;;AAIO,SAAS,YAAT,CAAsB,uBAAtB,EAA+C;AACpD,QAAM,YAAY,GAAG,OAAO,uBAAP,KAAmC,UAAnC,GAAgD,uBAAhD,GAA0E,MAAM,uBAArG;;AACA,WAAS,SAAT,CAAmB,MAAnB,EAA2B,OAA3B,EAAoC;AAClC,UAAM,KAAK,GAAG,eAAe,EAA7B;AACA,UAAM;AAAE,MAAA,MAAM,EAAE,WAAV;AAAuB,MAAA,UAAU,EAAE;AAAnC,QAAuD,qBAAqB,CAAC,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,IAApC,CAAlF;AACA,UAAM;AAAE,MAAA,GAAF;AAAO,MAAA;AAAP,QAAc,MAAM,EAA1B;;AACA,aAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC1B,aAAQ,iBAAgB,OAAO,IAAI,EAAG,EAAtC;AACD;;AACD,UAAM,SAAS,GAAG,YAAY,CAAC,KAAD,EAAQ,MAAR,EAAgB,SAAhB,CAA9B;;AACA,UAAM,OAAO,GAAG,QAAQ,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,MAA3C,MAAuD,UAAvD,GAAoE,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,MAAR,CAAe,KAAf,CAA/F,GAAuH,CAAC,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,MAApC,KAA+C,EAAtL;;AACA,UAAM,YAAY,GAAG,OAAO,WAAP,KAAuB,UAAvB,GAAoC,WAAW,CAAC,KAAD,EAAQ,MAAM,IAAI,EAAlB,CAA/C,GAAuE,WAAW,IAAI,EAA3G;;AACA,UAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,GAAvB,CAA4B,GAAD,IAAS;AAC9D,YAAM,YAAY,GAAG,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,GAAD,CAAV,CAAJ,EAAsB,GAAG,CAAC,YAAY,CAAC,GAAD,CAAb,CAAzB,EAA8C,GAAG,CAAC,OAAO,CAAC,GAAD,CAAR,CAAjD,CAAvB;AACA,aAAO,CAAC,GAAD,EAAM,YAAN,CAAP;AACD,KAH2B,CAAD,CAA3B;AAIA,WAAO;AACL,MAAA,OAAO,EAAE,eAAe,CAAC,EAAD,EAAK,OAAL,EAAc,eAAd,EAA+B,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,UAAlE,EAA8E,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2B,OAAO,CAAC,IAAjH,CADnB;AAEL,MAAA,EAFK;AAGL,MAAA;AAHK,KAAP;AAKD;;AACD,SAAO,SAAP;AACF","sourcesContent":["import type { MantineTheme } from '../theme';\nimport type { CSSObject } from './types';\nimport { fromEntries } from './utils/from-entries/from-entries';\nimport { useCss } from './use-css';\nimport { useMantineTheme, useMantineThemeStyles } from '../theme/MantineProvider';\nimport { mergeClassNames } from './utils/merge-class-names/merge-class-names';\n\nexport interface UseStylesOptions<Key extends string> {\n  classNames?: Partial<Record<Key, string>>;\n  styles?:\n    | Partial<Record<Key, CSSObject>>\n    | ((theme: MantineTheme) => Partial<Record<Key, CSSObject>>);\n  name: string;\n}\n\nexport function createStyles<Key extends string = string, Params = void>(\n  getCssObjectOrCssObject:\n    | ((\n        theme: MantineTheme,\n        params: Params,\n        createRef: (refName: string) => string\n      ) => Record<Key, CSSObject>)\n    | Record<Key, CSSObject>\n) {\n  const getCssObject =\n    typeof getCssObjectOrCssObject === 'function'\n      ? getCssObjectOrCssObject\n      : () => getCssObjectOrCssObject;\n\n  function useStyles(params: Params, options?: UseStylesOptions<Key>) {\n    const theme = useMantineTheme();\n    const { styles: themeStyles, classNames: themeClassNames } = useMantineThemeStyles(\n      options?.name\n    );\n\n    const { css, cx } = useCss();\n\n    function createRef(refName: string) {\n      return `__mantine-ref-${refName || ''}`;\n    }\n\n    const cssObject = getCssObject(theme, params, createRef);\n\n    const _styles =\n      typeof options?.styles === 'function' ? options?.styles(theme) : options?.styles || {};\n    const _themeStyles =\n      typeof themeStyles === 'function' ? themeStyles(theme, params || {}) : themeStyles || {};\n\n    const classes = fromEntries(\n      Object.keys(cssObject).map((key) => {\n        const mergedStyles = cx(css(cssObject[key]), css(_themeStyles[key]), css(_styles[key]));\n        return [key, mergedStyles];\n      })\n    ) as Record<Key, string>;\n\n    return {\n      classes: mergeClassNames(cx, classes, themeClassNames, options?.classNames, options?.name),\n      cx,\n      theme,\n    };\n  }\n\n  return useStyles;\n}\n"]},"metadata":{},"sourceType":"module"}