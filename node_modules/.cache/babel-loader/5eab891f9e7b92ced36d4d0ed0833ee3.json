{"ast":null,"code":"function isHexColor(hex) {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}$/i;\n  return HEX_REGEXP.test(hex);\n}\n\nfunction hexToRgba(color) {\n  let hexString = color.replace(\"#\", \"\");\n\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split(\"\");\n    hexString = [shorthandHex[0], shorthandHex[0], shorthandHex[1], shorthandHex[1], shorthandHex[2], shorthandHex[2]].join(\"\");\n  }\n\n  const parsed = parseInt(hexString, 16);\n  const r = parsed >> 16 & 255;\n  const g = parsed >> 8 & 255;\n  const b = parsed & 255;\n  return {\n    r,\n    g,\n    b,\n    a: 1\n  };\n}\n\nfunction rgbStringToRgba(color) {\n  const [r, g, b, a] = color.replace(/[^0-9,.]/g, \"\").split(\",\").map(Number);\n  return {\n    r,\n    g,\n    b,\n    a: a || 1\n  };\n}\n\nfunction toRgba(color) {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith(\"rgb\")) {\n    return rgbStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  };\n}\n\nexport { toRgba };","map":{"version":3,"sources":["../../../../src/theme/utils/to-rgba/to-rgba.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,CAAoB,GAApB,EAAyB;AACvB,QAAM,UAAU,GAAG,yBAAnB;AACA,SAAO,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAP;AACD;;AACD,SAAS,SAAT,CAAmB,KAAnB,EAA0B;AACxB,MAAI,SAAS,GAAG,KAAK,CAAC,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAhB;;AACA,MAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,YAAY,GAAG,SAAS,CAAC,KAAV,CAAgB,EAAhB,CAArB;AACA,IAAA,SAAS,GAAG,CACV,YAAY,CAAC,CAAD,CADF,EAEV,YAAY,CAAC,CAAD,CAFF,EAGV,YAAY,CAAC,CAAD,CAHF,EAIV,YAAY,CAAC,CAAD,CAJF,EAKV,YAAY,CAAC,CAAD,CALF,EAMV,YAAY,CAAC,CAAD,CANF,EAOV,IAPU,CAOL,EAPK,CAAZ;AAQD;;AACD,QAAM,MAAM,GAAG,QAAQ,CAAC,SAAD,EAAY,EAAZ,CAAvB;AACA,QAAM,CAAC,GAAG,MAAM,IAAI,EAAV,GAAe,GAAzB;AACA,QAAM,CAAC,GAAG,MAAM,IAAI,CAAV,GAAc,GAAxB;AACA,QAAM,CAAC,GAAG,MAAM,GAAG,GAAnB;AACA,SAAO;AACL,IAAA,CADK;AAEL,IAAA,CAFK;AAGL,IAAA,CAHK;AAIL,IAAA,CAAC,EAAE;AAJE,GAAP;AAMD;;AACD,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,QAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,IAAe,KAAK,CAAC,OAAN,CAAc,WAAd,EAA2B,EAA3B,EAA+B,KAA/B,CAAqC,GAArC,EAA0C,GAA1C,CAA8C,MAA9C,CAArB;AACA,SAAO;AAAE,IAAA,CAAF;AAAK,IAAA,CAAL;AAAQ,IAAA,CAAR;AAAW,IAAA,CAAC,EAAE,CAAC,IAAI;AAAnB,GAAP;AACD;;AACM,SAAS,MAAT,CAAgB,KAAhB,EAAuB;AAC5B,MAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AACrB,WAAO,SAAS,CAAC,KAAD,CAAhB;AACD;;AACD,MAAI,KAAK,CAAC,UAAN,CAAiB,KAAjB,CAAJ,EAA6B;AAC3B,WAAO,eAAe,CAAC,KAAD,CAAtB;AACD;;AACD,SAAO;AACL,IAAA,CAAC,EAAE,CADE;AAEL,IAAA,CAAC,EAAE,CAFE;AAGL,IAAA,CAAC,EAAE,CAHE;AAIL,IAAA,CAAC,EAAE;AAJE,GAAP;AAMF","sourcesContent":["/* eslint-disable no-bitwise */\n\ninterface RGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction isHexColor(hex: string): boolean {\n  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}$/i;\n\n  return HEX_REGEXP.test(hex);\n}\n\nfunction hexToRgba(color: string): RGBA {\n  let hexString = color.replace('#', '');\n\n  if (hexString.length === 3) {\n    const shorthandHex = hexString.split('');\n    hexString = [\n      shorthandHex[0],\n      shorthandHex[0],\n      shorthandHex[1],\n      shorthandHex[1],\n      shorthandHex[2],\n      shorthandHex[2],\n    ].join('');\n  }\n\n  const parsed = parseInt(hexString, 16);\n  const r = (parsed >> 16) & 255;\n  const g = (parsed >> 8) & 255;\n  const b = parsed & 255;\n\n  return {\n    r,\n    g,\n    b,\n    a: 1,\n  };\n}\n\nfunction rgbStringToRgba(color: string): RGBA {\n  const [r, g, b, a] = color\n    .replace(/[^0-9,.]/g, '')\n    .split(',')\n    .map(Number);\n\n  return { r, g, b, a: a || 1 };\n}\n\nexport function toRgba(color: string): RGBA {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith('rgb')) {\n    return rgbStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}