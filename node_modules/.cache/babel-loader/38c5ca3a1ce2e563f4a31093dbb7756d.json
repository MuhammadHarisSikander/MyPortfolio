{"ast":null,"code":"import { useState } from 'react';\n\nfunction useDisclosure(initialState, callbacks) {\n  const [opened, setOpened] = useState(initialState);\n\n  const open = () => {\n    var _a;\n\n    if (!opened) {\n      setOpened(true);\n      (_a = callbacks == null ? void 0 : callbacks.onOpen) == null ? void 0 : _a.call(callbacks);\n    }\n  };\n\n  const close = () => {\n    var _a;\n\n    if (opened) {\n      setOpened(false);\n      (_a = callbacks == null ? void 0 : callbacks.onClose) == null ? void 0 : _a.call(callbacks);\n    }\n  };\n\n  const toggle = () => {\n    opened ? close() : open();\n  };\n\n  return [opened, {\n    open,\n    close,\n    toggle\n  }];\n}\n\nexport { useDisclosure };","map":{"version":3,"sources":["../../src/use-disclosure/use-disclosure.ts"],"names":[],"mappings":";;AACO,SAAS,aAAT,CAAuB,YAAvB,EAAqC,SAArC,EAAgD;AACrD,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAAC,YAAD,CAApC;;AACA,QAAM,IAAI,GAAG,MAAM;AACjB,QAAI,EAAJ;;AACA,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,SAAS,CAAC,IAAD,CAAT;AACA,OAAC,EAAE,GAAG,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6B,SAAS,CAAC,MAA7C,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwE,EAAE,CAAC,IAAH,CAAQ,SAAR,CAAxE;AACD;AACF,GAND;;AAOA,QAAM,KAAK,GAAG,MAAM;AAClB,QAAI,EAAJ;;AACA,QAAI,MAAJ,EAAY;AACV,MAAA,SAAS,CAAC,KAAD,CAAT;AACA,OAAC,EAAE,GAAG,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6B,SAAS,CAAC,OAA7C,KAAyD,IAAzD,GAAgE,KAAK,CAArE,GAAyE,EAAE,CAAC,IAAH,CAAQ,SAAR,CAAzE;AACD;AACF,GAND;;AAOA,QAAM,MAAM,GAAG,MAAM;AACnB,IAAA,MAAM,GAAG,KAAK,EAAR,GAAa,IAAI,EAAvB;AACD,GAFD;;AAGA,SAAO,CAAC,MAAD,EAAS;AAAE,IAAA,IAAF;AAAQ,IAAA,KAAR;AAAe,IAAA;AAAf,GAAT,CAAP;AACF","sourcesContent":["import { useState } from 'react';\n\nexport function useDisclosure(\n  initialState: boolean,\n  callbacks?: { onOpen?(): void; onClose?(): void }\n) {\n  const [opened, setOpened] = useState(initialState);\n\n  const open = () => {\n    if (!opened) {\n      setOpened(true);\n      callbacks?.onOpen?.();\n    }\n  };\n\n  const close = () => {\n    if (opened) {\n      setOpened(false);\n      callbacks?.onClose?.();\n    }\n  };\n\n  const toggle = () => {\n    opened ? close() : open();\n  };\n\n  return [opened, { open, close, toggle }] as const;\n}\n"]},"metadata":{},"sourceType":"module"}